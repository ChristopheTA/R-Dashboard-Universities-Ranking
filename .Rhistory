})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("duc"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "type",
label = "Score Type",
choices = colnames(data[4:8])
),
sliderInput(inputId = "years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "histogram"),
leafletOutput(outputId = "map")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("duc"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "type",
label = "Score Type",
choices = colnames(data[4:8])
),
sliderInput(inputId = "years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "histogram"),
leafletOutput(outputId = "map")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup = ~country
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("duc"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "type",
label = "Score Type",
choices = colnames(data[4:8])
),
sliderInput(inputId = "years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "histogram"),
leafletOutput(outputId = "map")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup = c(~country,~n)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("duc"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "type",
label = "Score Type",
choices = colnames(data[4:8])
),
sliderInput(inputId = "years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "histogram"),
leafletOutput(outputId = "map")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, country
, "<br>"
, ~n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, ~country
, "<br>"
, ~n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
, g$n
)
)
})
}
.# Run the application
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("duc"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "type",
label = "Score Type",
choices = colnames(data[4:8])
),
sliderInput(inputId = "years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "histogram"),
leafletOutput(outputId = "map")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,color = ~teaching
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,color = ~teaching,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,fillcolor = ~teaching,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
pal <- colorNumeric(
palette = "Blues",
domain = countries$gdp_md_est)
pal <- colorNumeric(
palette = "Blues",
domain = countries$gdp_md_est)
pal <- colorNumeric(
palette = "Blues",
domain = g$teaching)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,color = ~pal(g),
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n) * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 650000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 650000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 65000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 65000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^5) * 65000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
