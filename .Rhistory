mainPanel(
plotOutput(outputId = "histogram")
)
)
),
tabPanel("Map", icon = icon("globe-americas"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "map_years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016
)
),
# Show a plot of the generated distribution
mainPanel(
leafletOutput(outputId = "map")
)
)
),
tabPanel("Top 10", icon = icon("university"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "top10_years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput(outputId = "top10")
)
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$graph <- renderPlot({
data %>%
filter(year==input$graph_years) %>%
ggplot(aes_string(x = input$graph_xtype, y = input$graph_ytype)) +
geom_point()
})
output$histogram <- renderPlot({
data %>%
filter(year==input$histo_years) %>%
ggplot(aes_string(x = input$histo_type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
# group data
grouped_data <- data %>%
filter(year==input$map_years) %>%
group_by(country) %>%
summarize(n=n()) %>%
unique()
# set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g universities <sup></sup>",
g$country, g$n) %>% lapply(htmltools::HTML)
#order countries
countries_data <- countries[countries$ADMIN %in% g$country,]
countries_data <- countries_data[order(countries_data$ADMIN),]
countries_data %>% leaflet() %>% addTiles %>%
addPolygons(
fillColor = ~pal(g$n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
label = labels
)  %>%
addLegend(pal = pal, values = g$n, opacity = 0.7, position = "bottomright")
})
output$top10 <- renderTable({
data[order(data$world_rank),] %>%
filter(year==input$top10_years) %>%
subset(select = c(world_rank,university_name,country,total_score)) %>%
head(10)
})
}
# Run the application
shinyApp(ui = ui, server = server)
bins <- c(1, 5, 10, 20, 35, 50, 75, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$graph <- renderPlot({
data %>%
filter(year==input$graph_years) %>%
ggplot(aes_string(x = input$graph_xtype, y = input$graph_ytype)) +
geom_point()
})
output$histogram <- renderPlot({
data %>%
filter(year==input$histo_years) %>%
ggplot(aes_string(x = input$histo_type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
# group data
grouped_data <- data %>%
filter(year==input$map_years) %>%
group_by(country) %>%
summarize(n=n()) %>%
unique()
# create palette
bins <- c(1, 5, 10, 20, 35, 50, 75, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
# set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g universities <sup></sup>",
g$country, g$n) %>% lapply(htmltools::HTML)
#order countries
countries_data <- countries[countries$ADMIN %in% g$country,]
countries_data <- countries_data[order(countries_data$ADMIN),]
countries_data %>% leaflet() %>% addTiles %>%
addPolygons(
fillColor = ~pal(g$n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
label = labels
)  %>%
addLegend(pal = pal, values = g$n, opacity = 0.7, position = "bottomright")
})
output$top10 <- renderTable({
data[order(data$world_rank),] %>%
filter(year==input$top10_years) %>%
subset(select = c(world_rank,university_name,country,total_score)) %>%
head(10)
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(g)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$graph <- renderPlot({
data %>%
filter(year==input$graph_years) %>%
ggplot(aes_string(x = input$graph_xtype, y = input$graph_ytype)) +
geom_point()
})
output$histogram <- renderPlot({
data %>%
filter(year==input$histo_years) %>%
ggplot(aes_string(x = input$histo_type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
# group data
grouped_data <- data %>%
filter(year==input$map_years) %>%
group_by(country) %>%
summarize(n=n()) %>%
unique()
# create palette
bins <- c(1, 5, 10, 20, 35, 50, 75, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
# set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g universities <sup></sup>",
grouped_data$country, grouped_data$n) %>% lapply(htmltools::HTML)
#order countries
countries_data <- countries[countries$ADMIN %in% grouped_data$country,]
countries_data <- countries_data[order(countries_data$ADMIN),]
countries_data %>% leaflet() %>% addTiles %>%
addPolygons(
fillColor = ~pal(grouped_data$n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
label = labels
)  %>%
addLegend(pal = pal, values = g$n, opacity = 0.7, position = "bottomright")
})
output$top10 <- renderTable({
data[order(data$world_rank),] %>%
filter(year==input$top10_years) %>%
subset(select = c(world_rank,university_name,country,total_score)) %>%
head(10)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$graph <- renderPlot({
data %>%
filter(year==input$graph_years) %>%
ggplot(aes_string(x = input$graph_xtype, y = input$graph_ytype)) +
geom_point()
})
output$histogram <- renderPlot({
data %>%
filter(year==input$histo_years) %>%
ggplot(aes_string(x = input$histo_type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
# group data
grouped_data <- data %>%
filter(year==input$map_years) %>%
group_by(country) %>%
summarize(n=n()) %>%
unique()
# create palette
bins <- c(1, 5, 10, 20, 35, 50, 75, Inf)
pal <- colorBin("YlOrRd", domain = grouped_data$n, bins = bins)
# set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g universities <sup></sup>",
grouped_data$country, grouped_data$n) %>% lapply(htmltools::HTML)
#order countries
countries_data <- countries[countries$ADMIN %in% grouped_data$country,]
countries_data <- countries_data[order(countries_data$ADMIN),]
countries_data %>% leaflet() %>% addTiles %>%
addPolygons(
fillColor = ~pal(grouped_data$n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
label = labels
)  %>%
addLegend(pal = pal, values = g$n, opacity = 0.7, position = "bottomright")
})
output$top10 <- renderTable({
data[order(data$world_rank),] %>%
filter(year==input$top10_years) %>%
subset(select = c(world_rank,university_name,country,total_score)) %>%
head(10)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$graph <- renderPlot({
data %>%
filter(year==input$graph_years) %>%
ggplot(aes_string(x = input$graph_xtype, y = input$graph_ytype)) +
geom_point()
})
output$histogram <- renderPlot({
data %>%
filter(year==input$histo_years) %>%
ggplot(aes_string(x = input$histo_type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
# group data
grouped_data <- data %>%
filter(year==input$map_years) %>%
group_by(country) %>%
summarize(n=n()) %>%
unique()
# create palette
bins <- c(1, 5, 10, 20, 35, 50, 75, Inf)
pal <- colorBin("YlOrRd", domain = grouped_data$n, bins = bins)
# set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g universities <sup></sup>",
grouped_data$country, grouped_data$n) %>% lapply(htmltools::HTML)
#order countries
countries_data <- countries[countries$ADMIN %in% grouped_data$country,]
countries_data <- countries_data[order(countries_data$ADMIN),]
countries_data %>% leaflet() %>% addTiles %>%
addPolygons(
fillColor = ~pal(grouped_data$n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
label = labels
)  %>%
addLegend(pal = pal, values = grouped_data$n, opacity = 0.7, position = "bottomright")
})
output$top10 <- renderTable({
data[order(data$world_rank),] %>%
filter(year==input$top10_years) %>%
subset(select = c(world_rank,university_name,country,total_score)) %>%
head(10)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$graph <- renderPlot({
data %>%
filter(year==input$graph_years) %>%
ggplot(aes_string(x = input$graph_xtype, y = input$graph_ytype)) +
geom_point()
})
output$histogram <- renderPlot({
data %>%
filter(year==input$histo_years) %>%
ggplot(aes_string(x = input$histo_type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
# group data
grouped_data <- data %>%
filter(year==input$map_years) %>%
group_by(country) %>%
summarize(n=n()) %>%
unique()
# create palette
bins <- c(1, 5, 10, 20, 35, 50, 80, Inf)
pal <- colorBin("YlOrRd", domain = grouped_data$n, bins = bins)
# set labels
labels <- sprintf(
"<strong>%s</strong><br/>%g universities <sup></sup>",
grouped_data$country, grouped_data$n) %>% lapply(htmltools::HTML)
#order countries
countries_data <- countries[countries$ADMIN %in% grouped_data$country,]
countries_data <- countries_data[order(countries_data$ADMIN),]
countries_data %>% leaflet() %>% addTiles %>%
addPolygons(
fillColor = ~pal(grouped_data$n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
label = labels
)  %>%
addLegend(pal = pal, values = grouped_data$n, opacity = 0.7, position = "bottomright")
})
output$top10 <- renderTable({
data[order(data$world_rank),] %>%
filter(year==input$top10_years) %>%
subset(select = c(world_rank,university_name,country,total_score)) %>%
head(10)
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(list = ls())
runApp()
install.packages("tidyverse")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
source("imports.R")
source("imports.R")
source("imports.R")
install.packages("tidyverse")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
runApp()
install.packages("tidyverse")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
runApp()
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
install.packages("tidyverse")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
runApp()
install.packages("tidyverse")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
source(global.R)
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
print(source(global.R))
print(source("global.R"))
install.packages("tidyverse")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
print(source("global.R"))
install.packages("tidyverse")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
print(source("global.R"))
print(source("global.R"))
rm(list=ls())
runApp()
install.packages("tidyverse")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
install.packages("shiny")
install.packages("leaflet")
install.packages("geojsonio")
rm(list = ls())
runApp()
runApp()
rm(list ) ls()
rm(list=ls())
runApp()
rm(list=ls())
runApp()
rm(list=ls())
# Importation des datasets
data = read.table("timesData.csv", sep = ',', header = T, na.strings = c("NA","-",""))
# On change le nom de certains pays
# Pas le nom officiel
data$country <- data$country %>% str_replace("Hong Kong","Hong Kong S.A.R.")
data$country <- data$country %>% str_replace("Macau","Macao S.A.R")
data$country <- data$country %>% str_replace("Serbia","Republic of Serbia")
data$country <- data$country %>% str_replace("Russian Federation","Russia")
data$country <- data$country %>% str_replace("Republic of Ireland","Ireland")
# Erreur
data$country <- data$country %>% str_replace("Unisted States of America","United States of America")
data$country <- data$country %>% str_replace("Unted Kingdom","United Kingdom")
# On met world_rank en nombre
data$world_rank = as.integer(str_replace((str_replace(data$world_rank,"=","")),"-","."))
# On met international_students en nombre
data$international_students = as.integer(str_replace(data$international_students, "%",""))
colnames(data)[12] = "international_students_ratio"
# On met female_male_ration en nombre
data$female_male_ratio = as.integer(str_replace(data$female_male_ratio, " : ","."))
colnames(data)[13] = "female_ratio"
source("server.R", local = TRUE)
source("ui.R", local = TRUE)
# Run the application
shinyApp(ui = ui, server = server)
rm(list=ls())
runApp()
install.packages("shinythemes")
library(shinythemes)
rm(list = ls())
shiny::runApp()
runApp()
runApp()
source("import.R", local = TRUE)
runApp()
source("imports.R", local = TRUE)
install.packages("shiny")
install.packages("shinythemes")
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#source("imports.R", local = TRUE)
source("global.R", local = TRUE)
#source("imports.R", local = TRUE)
source("global.R", local = TRUE)
source("server.R", local = TRUE)
source("ui.R", local = TRUE)
source("global.R", local = TRUE)
runApp()
runApp()
View(data)
str(data)
runApp()
View(data)
runApp()
View(data)
runApp()
runApp()
runApp()
View(data)
str(data)
rm(list = ls())
runApp()
rm(list = ls())
runApp()
runApp()
rm(list = ls())
