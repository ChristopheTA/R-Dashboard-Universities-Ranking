leafletOutput(outputId = "map")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, country
, "<br>"
, ~n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, ~country
, "<br>"
, ~n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
, g$n
)
)
})
}
.# Run the application
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("duc"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "type",
label = "Score Type",
choices = colnames(data[4:8])
),
sliderInput(inputId = "years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "histogram"),
leafletOutput(outputId = "map")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,color = ~teaching
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,color = ~teaching,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,fillcolor = ~teaching,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
pal <- colorNumeric(
palette = "Blues",
domain = countries$gdp_md_est)
pal <- colorNumeric(
palette = "Blues",
domain = countries$gdp_md_est)
pal <- colorNumeric(
palette = "Blues",
domain = g$teaching)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,color = ~pal(g),
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n) * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 650000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 650000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 65000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^2) * 65000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~log(n^5) * 65000, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$histogram <- renderPlot({
data %>%
filter(year==input$years) %>%
ggplot(aes_string(x = input$type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
leaflet(g) %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  paste0( "Country:"
, g$country
, "<br>"
,"Number of universities:"
, g$n
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
source("ui.R")
install.packages("shiny")
install.packages("leaflet")
# Run the application
shinyApp(ui = ui, server = server)
View(ui)
View(ui)
# Importation des datasets
times = read.table("timesData.csv", sep = ',', header = T, na.strings = c("NA","-",""))
countrycoord = read.table("country-coordinates-world.csv", sep = ',', header = T, quote = "")
# Fusion des datasets
colnames(countrycoord)[3] = "country"
data = merge(times, countrycoord, by = "country")
# On met world_rank en nombre
data$world_rank = as.integer(str_replace((str_replace(data$world_rank,"=","")),"-","."))
# On met international_students en nombre
data$international_students = as.integer(str_replace(data$international_students, "%",""))
colnames(data)[12] = "international_students_ratio"
# On met female_male_ration en nombre
data$female_male_ratio = as.integer(str_replace(data$female_male_ratio, " : ","."))
colnames(data)[13] = "female_ratio"
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("J'adore duc"),
# Sidebar with a slider input for number of bins
navbarPage("duc",
tabPanel("Graph", fluid = T, icon = icon("chart-line"),
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "graph_ytype",
label = "Y Type",
choices = colnames(data[4:13])
),
selectizeInput(inputId = "graph_xtype",
label = "X Type",
choices = colnames(data[4:13])
),
sliderInput(inputId = "graph_years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
mainPanel(
plotOutput(outputId = "graph")
)
)
),
tabPanel("Histogram", icon = icon("chart-bar"),
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "histo_type",
label = "Score Type",
choices = colnames(data[4:13])
),
sliderInput(inputId = "histo_years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "histogram")
)
)
),
tabPanel("Map", icon = icon("globe-americas"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "map_years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
leafletOutput(outputId = "map")
)
)
),
tabPanel("Top 10", icon = icon("university"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "top10_years",
label = "Year",
min = 2011,
max = 2016,
step = 1,
value = 2016,
animate = T)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput(outputId = "top10")
)
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$graph <- renderPlot({
data %>%
filter(year==input$graph_years) %>%
ggplot(aes_string(x = input$graph_xtype, y = input$graph_ytype)) +
geom_point()
})
output$histogram <- renderPlot({
data %>%
filter(year==input$histo_years) %>%
ggplot(aes_string(x = input$histo_type)) +
geom_histogram(boundary = 0, binwidth = 5)
})
output$map <- renderLeaflet({
data %>%
filter(year==input$map_years) %>%
group_by(country) %>%
summarize(n=n(), longitude, latitude) %>%
unique() %>%
leaflet() %>% addTiles() %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 1,
radius = ~n * 6500, popup =  ~paste0( "Country:"
, country
, "<br>"
,"Number of universities:"
, n
)
)
})
output$top10 <- renderTable({
data[order(data$world_rank),] %>%
filter(year==input$top10_years) %>%
subset(select = c(world_rank,university_name,country,total_score)) %>%
head(10)
})
}
# Run the application
shinyApp(ui = ui, server = server)
continents = read.table("continents2.csv", sep = ",", header = T, quote = "")
continents = read.table("continents2.csv", sep = ",", header = T, quote = "")
continents = read.table("continents2.csv", sep = ",", header = T, quote = "")
continents = read.table("continents2.csv", sep = ",", header = T, quote = "", na.strings = c("NA",""))
continents = read.table("ccountries_continents_codes_flags_url.csv", sep = ",", header = T, quote = "", na.strings = c("NA",""))
continents = read.table("countries_continents_codes_flags_url.csv", sep = ",", header = T, quote = "", na.strings = c("NA",""))
